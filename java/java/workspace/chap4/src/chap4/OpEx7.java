package chap4;
/*
 * 
 * shift 연산자 :
 *  x << n : x를 n비트만큼 왼쪽으로 이동
 *  x >> n : x를 n비트만큼 오른쪽으로 이동. 부호 유지
 *  x >>> n : x를 n비트만큼 오른쪽으로 이동. 0으로 비트를 채운다.
 *  <<,>>,>>>
 *  암호 알고리즘 쪽에 쓰이는 용도
 */
public class OpEx7 {

	public static void main(String[] args) {
		System.out.println("8 << 2 :" + (8<<2));
		/*
		 *       8 : 00001000
		 *  8 << 2 : 00100000 : 32
		 */
		System.out.println("8 >> 2 :" + (8>>2));
		/*
		 *       8 : 00001000
		 *  8 >> 2 : 00000010 : 2
		 *  
		 */
		System.out.println("8 >>> 2 :" + (8>>>2));
		/*
		 *       8 : 00001000
		 *  8 >> 2 : 00000010 : 2
		 */
		System.out.println("-8 << 2 :" + (-8<<2));
		/*
		 *       -8 : 11111111111111111111111111111000
		 *  -8 << 2 : 11111111111111111111111111100000 : -32
		 */
		System.out.println("-8 >> 2 :" + (-8>>2));
		/*
		 *       -8 : 11111111111111111111111111111000
		 *  -8 >> 2 : 11111111111111111111111111111110 : -2
		 */
		System.out.println("-8 >>> 2 :" + (-8>>>2));
		/*
		 *        -8 : 11111111111111111111111111111000
		 *  -8 >>> 2 : 00111111111111111111111111111110 : 
		 */
		System.out.println("8 :" + Integer.toBinaryString(8)); //8이라는 값을 이진수로 표현하는 방법
		System.out.println("-8 :" + Integer.toBinaryString(-8)); //-8이라는 값은 이진수로 표현

	}

}
